---
import { DjangoURLs } from "@assets";
import { Icon } from "astro-icon/components";
import { DateTime } from "luxon";

interface Props {
    task: DjangoAPI.Task;
}

const {
    task = {} as DjangoAPI.Task,
    ...props
} = Astro.props as Props;

if (!Object.keys(task).length) Object.assign(task, (await import("@assets")).DummyData.Task);
---

<div class="p-5 border border-neutral rounded-xl shadow-theme-sm">
    <div class="flex flex-col gap-5 xl:flex-row xl:items-center xl:justify-between">
        <div x-data={`{createdEpoch: ${task.created_at_epoch}, relativeTime: null }`}
            x-effect="(window.Alpine.store('globalInterval').flag).toString() && (relativeTime = window.luxon.DateTime.fromSeconds(createdEpoch).toRelative())"
            class="flex items-start w-full gap-4" >
            <Icon name="heroicons:bars-4-16-solid" />
            <div>{task.uuid}</div>
            <div>{task.name}</div>
            <div>{task.workspace_uuid}</div>
            <div hx-get={DjangoURLs.api.pyodm.workspaces(task.workspace_uuid).tasks(task.uuid).status()}
                hx-trigger={`sse:task-${task.uuid}-status`}
            >{task.status}</div>
            <div x-text="relativeTime">{
                task.created_at_epoch && DateTime.fromSeconds(task.created_at_epoch).toRelative()
            }</div>
        </div>
    </div>
</div>