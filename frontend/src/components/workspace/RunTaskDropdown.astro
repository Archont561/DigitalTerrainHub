---
import { Utils } from "@components";

export interface Props extends Astro.HTMLComponentProps<"div"> {
    workspace?: DjangoAPI.Workspace;
    presets?: DjangoAPI.Preset[];
}

const { 
    workspace = {} as DjangoAPI.Workspace,
    presets = [] as DjangoAPI.Preset[],
    ...props
} = Astro.props;

const { globalPresets, userPresets } = presets.reduce<{
  globalPresets: DjangoAPI.Preset[];
  userPresets: DjangoAPI.Preset[];
}>((acc, preset) => {
  if (preset.preset_type === "global") acc.globalPresets.push(preset);
  else if (preset.preset_type === "custom") acc.userPresets.push(preset);
  return acc;
}, { globalPresets: [], userPresets: [] });

const toTitle = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);
---

<Utils.Dropdown
    horizontal="dropdown-left"
    vertical="dropdown-start"
     class="btn btn-square btn-ghost"
    x-data="{ locked: false, selectedPreset: '', handleDialogClose() { const dialog = window.htmx.find('#options-dialog'); $data.locked = true; const dialogCloseHandler = () => { $data.locked = false; dialog.removeEventListener('close', dialogCloseHandler); }; dialog.showModal(); dialog.addEventListener('close', dialogCloseHandler); } }"
    x-bind:class="{ 'dropdown-open': locked }"
    x-on:submit="$store.optionsData=null"
    {...props}
>
    <form 
        hx-post={`/workspaces/${workspace.uuid}/tasks`}
        hx-trigger="submit"
        hx-target="body div[sse-connect='/events/pyodm']"
        hx-swap="afterbegin"
        hx-ext="form-json"
        class="bg-base-100 border-neutral border-2 p-3 min-w-xs rounded-box flex flex-col"
    >
        <div class="join">
            <label class="label join-item label-text">Name</label>
            <input type="text" name="name" class="input input-bordered join-item" placeholder="Enter name..." required>
        </div>
        <div class="join">
            <label class="label join-item">Options</label>
            <div class="join join-item">
                <select required name="options-preset" class="select join-item">
                    <option selected value="Default">Default</option>
                  
                    <optgroup label="Global Presets">
                      {globalPresets.map((preset) => (
                        <option value={preset.name}>{toTitle(preset.name)}</option>
                      ))}
                    </optgroup>
                    <optgroup label="User Presets">
                      {userPresets.length > 0 ? (
                        userPresets.map((preset) => (
                          <option value={preset.name}>{toTitle(preset.name)}</option>
                        ))
                      ) : (
                        <option disabled>No user presets available</option>
                      )}
                    </optgroup>
                  
                    <option value="custom">Custom</option>
                  </select>
                <button type="button" class="join-item btn btn-secondary"
                    @click="handleDialogClose()"
                >Edit</button>
            </div>
        </div>
        <input type="hidden" name="options" x-ref="optionsInput" x-model="$store.optionsData">
        <div class="flex justify-end">
            <input type="submit" value="Create task" class="btn btn-primary">
        </div>
    </form>
</Utils.Dropdown>