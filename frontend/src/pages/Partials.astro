---
import * as Flow from "@astropub/flow";
import Layout from "@layouts";

export const partial = import.meta.env.PROD;
type AstroRenderFn = (_props: any) => {};

let modules: Record<string, AstroRenderFn> = {};
if (import.meta.env.DEV) {
    modules = import.meta.glob("@components/**/*.astro", { eager: true });
} else {
    modules = import.meta.glob("@components/{workspace,task,preset,notifications}/**/*.astro", { eager: true });
}

const componentMap: Record<string, AstroRenderFn> = {};

function normalizePath(filePath: string): string {
    return filePath
        .replace(/^.*\/components\//, '')
        .replace(/\.astro$/, '')
        .toLowerCase();
}

for (const path in modules) {
    const key = normalizePath(path);
    componentMap[key] = (modules[path] as any).default;
}

let props = {};

if (Astro.request.method === "POST") {
    try {
        props = await Astro.request.json();
    } catch (err) {
        console.error("Failed to parse request body:", err);
    }
}

const path = Astro.params.path?.toLowerCase() || "";

const ComponentToRender = componentMap[path];
if (!ComponentToRender){
    return Astro.rewrite("/astro/404");
}
---

<Flow.When test={partial}>
    <ComponentToRender {...props} />
    <Fragment slot="else">
        <Layout.Base title="test">
            <ComponentToRender {...props} />
        </Layout.Base>
    </Fragment>
</Flow.When>