---
import type { ComponentProps } from "astro/types";
import type { GridProps } from "./types";
import { getGridCSSVariables } from "./utils";
import { clsx as mergeCSSClasses } from "clsx";
import Layout from "@layouts";

export type Props = GridProps &
  Astro.ComponentProps &
  ComponentProps<typeof Layout.Melt>;

const {
  inline,
  subgrid,
  cols,
  rows,
  gap,
  contentPlacement,
  cellsPlacement,
  newColSize,
  newRowSize,
  newCellAutoPlacement,
  class: className,
  style,
  ...props
} = Astro.props;

const gridClasses = mergeCSSClasses(
  className,
  "astro-responsive-grid",
  inline ? "inline-grid" : "grid",
  {
    "grid-cols-subgrid": subgrid && subgrid !== "row",
    "grid-rows-subgrid": subgrid && subgrid !== "col",
    "grid-rows-(--grid-rows)": subgrid !== "row" && rows,
    "grid-cols-(--grid-cols)": subgrid !== "col" && cols,
    "gap-(--grid-gap)": gap,
    "place-content-(--place-content)": contentPlacement,
    "place-items-(--place-items)": cellsPlacement,
    "auto-rows-(--auto-rows)": newRowSize,
    "auto-cols-(--auto-cols)": newColSize,
    "grid-flow-(--grid-flow)": newCellAutoPlacement,
  },
);

const gridStyles = mergeCSSClasses(style, getGridCSSVariables({
  props: { cols, rows, gap, contentPlacement, cellsPlacement, newColSize, newRowSize, newCellAutoPlacement },
  asInlineStyle: true,
}));
---

<Layout.Melt class={gridClasses} {...props} style={gridStyles}>
  <slot />
</Layout.Melt>
