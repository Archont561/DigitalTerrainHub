---
import type { ComponentProps } from "astro/types";
import Melt from "./Melt.astro";
import * as Flow from "@astropub/flow";
import { clsx as mergeCSSClasses } from "clsx";
import _ from "lodash";

type CSSLengthUnit =
    | `px`
    | `em`
    | `rem`
    | `%`
    | `vw`
    | `vh`
    | `vmin`
    | `vmax`
    | `ch`
    | `ex`
    | `pt`
    | `pc`
    | `in`
    | `cm`
    | `mm`;

type CSSLengthKeyword =
    | "auto"
    | "fit-content"
    | "max-content"
    | "min-content"
    | "inherit"
    | "initial"
    | "unset";

type Length = number | `${number}${CSSLengthUnit}` | CSSLengthKeyword;

export interface Props
    extends Astro.ComponentProps,
        ComponentProps<typeof Melt> {
    minWidth: Length;
    maxWidth: Length;
    baseWidth: Length;
    minHeight?: Length;
    baseHeight?: Length;
    maxHeight?: Length;
    asTwClasses?: boolean;
}

const {
    minWidth,
    maxWidth,
    baseWidth,
    minHeight,
    baseHeight,
    maxHeight,
    asTwClasses = false,
    style,
    class: className,
    ...props
} = Astro.props;

const normalizeLength = (value: Length | undefined) =>
    typeof value === "number" ? `${value}px` : value;

let styleHTML = "";
let combinedClass = className;
let clampUUID = "";

if (asTwClasses) {
    combinedClass = mergeCSSClasses(
        className,
        minWidth,
        baseWidth,
        maxWidth,
        minHeight,
        baseHeight,
        maxHeight,
    );
} else {
    clampUUID = crypto.randomUUID();
    const {
        minWidth: minW,
        baseWidth: baseW,
        maxWidth: maxW,
        minHeight: minH,
        baseHeight: baseH,
        maxHeight: maxH,
    } = _.mapValues(
        { minWidth, baseWidth, maxWidth, minHeight, baseHeight, maxHeight },
        normalizeLength,
    );

    const widthClamp = minW && baseW && maxW
            ? `width: clamp(${minW}, ${baseW}, ${maxW});`
            : "";
    const heightClamp = minH && baseH && maxH
            ? `height: clamp(${minH}, ${baseH}, ${maxH});`
            : "";

    styleHTML = `<style> [${clampUUID}] { ${widthClamp} ${heightClamp} } </style>`;
}
---

<Melt
    {...{
        ...props,
        class: combinedClass,
        ...(clampUUID ? { [clampUUID]: "" } : {}),
    }}
>
    <slot />
    <Flow.When test={!asTwClasses}>
        <Fragment set:html={styleHTML} />
    </Flow.When>
</Melt>
