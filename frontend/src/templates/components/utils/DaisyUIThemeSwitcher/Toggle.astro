---
import * as Flow from "@astropub/flow";
import {
    DaisyUIDarkThemes,
    DaisyUILightThemes,
    type DaisyUIDarkTheme,
    type DaisyUILightTheme,
} from "./daisyUIThemes";

type ThemeSwitcherType =
    | "toggle"
    | "checkbox"
    | "swap"
    | "text toggle"
    | "icon toggle"
    | "toggle icons inside";

interface Props extends Astro.HTMLComponentProps<"div"> {
    id?: string;
    type?: ThemeSwitcherType;
    darkTheme: DaisyUIDarkTheme;
    lightTheme: DaisyUILightTheme;
}

const {
    id = "daisyui-theme-controller",
    type = "toggle",
    lightTheme,
    darkTheme,
    ...props
} = Astro.props;

if (!lightTheme || !DaisyUILightThemes.includes(lightTheme)) {
    throw new Error(`No such light theme ${lightTheme}!`);
}
if (!darkTheme || !DaisyUIDarkThemes.includes(darkTheme)) {
    throw new Error(`No such dark theme ${darkTheme}!`);
}
---

<div
    id={id}
    {...props}
    data-light-theme={lightTheme}
    data-dark-theme={darkTheme}
    x-data="ToggleThemeController"
>
    <Flow.Switch of={type}>
        <Flow.Case of={"toggle"}>
            <input
                type="checkbox"
                x-on:click="changeTheme($el.checked)"
                x-ref="controller"
                class="toggle"
            />
        </Flow.Case>
        <Flow.Case of={"checkbox"}>
            <input
                type="checkbox"
                x-on:click="changeTheme($el.checked)"
                x-ref="controller"
                class="checkbox theme-controller"
            />
        </Flow.Case>
        <Flow.Case of={"swap"}>
            <div class="swap">
                <input
                    type="checkbox"
                    x-on:click="changeTheme($el.checked)"
                    x-ref="controller"
                    class="toggle theme-controller"
                />
                <slot name="light-icon" />
                <slot name="dark-icon" />
            </div>
        </Flow.Case>
        <Flow.Case of={"text toggle"}>
            <label class="flex cursor-pointer gap-2">
                <span class="label-text">
                    <slot name="light-text" />
                </span>
                <input
                    type="checkbox"
                    x-on:click="changeTheme($el.checked)"
                    x-ref="controller"
                    class="toggle theme-controller"
                />
                <span class="label-text">
                    <slot name="dark-text" />
                </span>
            </label>
        </Flow.Case>
        <Flow.Case of={"icon toggle"}>
            <label class="flex cursor-pointer gap-2">
                <slot name="light-icon" />
                <input
                    type="checkbox"
                    x-on:click="changeTheme($el.checked)"
                    x-ref="controller"
                    class="toggle theme-controller"
                />
                <slot name="dark-icon" />
            </label>
        </Flow.Case>
        <Flow.Case of={"toggle icons inside"}>
            <label class="toggle text-base-content">
                <input
                    type="checkbox"
                    x-on:click="changeTheme($el.checked)"
                    x-ref="controller"
                    class="theme-controller"
                />
                <slot name="light-icon" />
                <slot name="dark-icon" />
            </label>
        </Flow.Case>
    </Flow.Switch>
</div>

<script>
    window.addEventListener("alpine:init", () => {
        window.Alpine.data("ToggleThemeController", () => ({
            theme: window.Alpine.$persist("none")
                .as("daisyUITheme")
                .using(sessionStorage),

            init() {
                //@ts-ignore
                const mediaQuery = window.matchMedia(
                    "(prefers-color-scheme: dark)",
                );
                const mediaChangeTheme = (flag: boolean) => {
                    this.changeTheme(flag);
                    (this.$refs.controller as HTMLInputElement).checked = flag;
                };
                this.theme === "none" && mediaChangeTheme(mediaQuery.matches);
                (this.$refs.controller as HTMLInputElement).checked = this.theme === this.$el.dataset.darkTheme
                document.documentElement.dataset.theme = this.theme;
                mediaQuery.addEventListener("change", (e) => {
                    mediaChangeTheme(e.matches);
                });
            },
            changeTheme(flag: boolean) {
                const theme = flag
                    ? this.$root.dataset.darkTheme
                    : this.$root.dataset.lightTheme;
                document.documentElement.dataset.theme = theme;
                //@ts-ignore
                this.theme = theme;
            },
        }));
    });
</script>
