---
import * as Flow from "@astropub/flow";
import { mergeClass } from "@utils";
import { Window } from 'happy-dom';

type PopoverType = "default" | "focus" | "anchor";
type PopoverPlacement = Exclude<
    `${"top" | "start" | "center" | "end" | "bottom"} ${"left" | "start" | "center" | "end" | "right"}`, 
    "center center">;

export interface Props extends Astro.HTMLComponentProps<"details" | "div"> {
    placement?: PopoverPlacement;
    forceOpen?: boolean;
    openOnHover?: boolean;
    type?: PopoverType;
}

const {
    placement = "bottom center",
    forceOpen = false,
    openOnHover = true,
    type = "default",
    class: className,
    ...props
} = Astro.props;

function getDropdownClasses(placement: PopoverPlacement): string {
    const vertical: Record<string, string> = {
        top: "dropdown-top",
        bottom: "dropdown-bottom",
        start: "dropdown-start",
        end: "dropdown-end",
        center: "dropdown-center",
    };

    const horizontal: Record<string, string> = {
        start: "dropdown-start",
        end: "dropdown-end",
        center: "dropdown-center",
        top: "dropdown-top",
        bottom: "dropdown-bottom",
    };

    const [vPlacement, hPlacement] = placement.split(" ");
    return [vertical[vPlacement], horizontal[hPlacement]].join(" ");
}

const popoverClass = mergeClass(
    className, 
    "dropdown apperance-none",
    getDropdownClasses(placement),
)
const anchorRandId = crypto.randomUUID(); 


function extractAttributes(el: HTMLElement, omit: string[]) {
    const attributes = {} as Record<string, any>;
    el?.getAttributeNames()
        .filter(attrName => !omit.includes(attrName))
        .forEach(attrName => {
            attributes[attrName] = el.getAttribute(attrName);
        });
    return attributes;
}

const parser = new (new Window()).DOMParser();
let document = parser.parseFromString(await Astro.slots.render("popover-trigger"), 'text/html');

const triggerEl = document.body.firstElementChild as unknown as HTMLElement;
const popoverTriggerClass = triggerEl?.getAttribute("class") || "";
const popoverTriggerAttributes = extractAttributes(triggerEl, ["class"]);
const popoverTriggerInnerHTML = triggerEl?.innerHTML || "";

document = parser.parseFromString(await Astro.slots.render("popover-content"), 'text/html');
const contentEl = document.body.firstElementChild as unknown as HTMLElement;;
const popoverContentClass = contentEl?.getAttribute("class") || "";
const popoverContentAttributes = extractAttributes(contentEl, ["class"]);
const popoverContentInnerHTML = contentEl?.innerHTML || "";
---

<Flow.Switch of={type}>
    <Flow.Case of="anchor">
        <button
            class={popoverTriggerClass}
            popovertarget={`popover-${anchorRandId}`}
            style={`anchor-name:--anchor-${anchorRandId}`}
            set:html={popoverTriggerInnerHTML}
            {...popoverTriggerAttributes}>
        </button>
        <div class={popoverClass} {...props}
            popover
            id={`popover-${anchorRandId}`}
            style={`position-anchor:--anchor-${anchorRandId}`}>
            <div 
                set:html={popoverContentInnerHTML} 
                {...popoverContentAttributes} 
                class={popoverContentClass}></div>
        </div>
    </Flow.Case>
    <Flow.Case of="focus">
        <div class={popoverClass} {...props}>
            <div tabindex="0" role="button" class={popoverTriggerClass}
                set:html={popoverTriggerInnerHTML}
                {...popoverTriggerAttributes}></div>
            <div tabindex="0" class={mergeClass('dropdown-content', popoverContentClass)}
                set:html={popoverContentInnerHTML}
                {...popoverContentAttributes}></div>
        </div>
    </Flow.Case>
    <Flow.Case default>
        <details class={popoverClass} {...props}>
            <summary class={mergeClass("apperance-none block", popoverTriggerClass)}
                set:html={popoverTriggerInnerHTML}
                {...popoverTriggerAttributes}></summary>
            <div class={mergeClass('dropdown-content', popoverContentClass)}
                set:html={popoverContentInnerHTML}
                {...popoverContentAttributes}></div>
        </details>
    </Flow.Case>
</Flow.Switch>
